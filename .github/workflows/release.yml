name: "C++ CI"

on:
  push:
    branches:
      - master
      - feature/github_actions

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.10

      - name: Install CMake
        run: choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      # - name: Install Boost
      #   run: choco install -y boost-msvc-14.2

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGE_VERSION=${{ github.run_number }}

      - name: Build project
        run: cmake --build build --target ALL_BUILD

      - name: List build directory
        run: dir build

      - name: List Debug directory
        run: dir build/Debug

      # - name: Run tests
      #   run: ctest --test-dir build --output-on-failure

      - name: Package with CPack
        run: cmake --build build --target package

      - name: List build directory
        run: dir build

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # - name: Install Boost Test
      #   run: sudo apt-get update && sudo apt-get install libboost-test-dev -y

      - name: Configure and build
        run: |
          cmake -Bbuild -S. -DPATCH_VERSION=${{ github.run_number }}
          cmake --build build

      # - name: Run tests
      #   run: |
      #     cd build
      #     ctest --output-on-failure

      - name: Package
        run: cmake --build build --target package

      - name: List Build Directory
        run: ls -la build

  create_release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-ubuntu]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release_step
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}-${{ github.sha }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        outputs:
          upload_url: ${{ steps.create_release_step.outputs.upload_url }}

  upload-windows-asset:
    needs: [create_release, build-windows]
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/IPParserInstaller.exe
          asset_name: IPParserInstaller-1.0.${{ github.run_number }}-win64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

  upload-ubuntu-asset:
    needs: [create_release, build-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/IPParser-1.0.${{ github.run_number }}-Linux.deb
          asset_name: IPParser-1.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
